

SET(SOURCE_FILES CACHE INTERNAL "Global")
#message("A: ${SOURCE_FILES}")

#file(GLOB helloworld_SRC
#    "*.h"
#    "*.cpp"
#)
#add_executable(helloworld ${helloworld_SRC})

SET(SOURCE_FILES ${SOURCE_FILES}

#    io_data/boost_input_utils.cc
#    io_data/genome_data_stream.cc

    ${CMAKE_CURRENT_SOURCE_DIR}/constant.h
    ${CMAKE_CURRENT_SOURCE_DIR}/lookup.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/setup_utils.cpp

#    mutations/model.cc
#    mutations/mutation_model.cc
#    mutations/mutation_model_multi_categories.cc
#    mutations/mutation_prob.cc
#
##    io_data/parsers.cc
##    io_data/pileup_utils.cc
#
#    mutations/site_genotypes.cc
#
#    mutations/sequence_prob_v1.cc
#    mutations/sequencing_factory.cc
#    mutations/site_prob.cc
#    mutations/sequencing_factory.h
#    mutations/sequencing_factory.cc
#    mutations/sequencing_factory.h
#    mutations/sequencing_factory.h
#    mutations/site_genotype_index.cpp
#    mutations/site_genotype_index.h

#    io_data/VariantVisitor.cc
#    io_data/variant_visitor_two.cc

    CACHE INTERNAL "Global"
    )

#subdirs(${CMAKE_CURRENT_SOURCE_DIR})
#include_directories(${CMAKE_CURRENT_SOURCE_DIR})

#list (APPEND SOURCE_LIST ${SOURCE_FILES})
#file(GLOB_RECURSE SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cc)

#message("BB: ${SOURCE_FILES} ${PROJECT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ")

if(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
  message("Using /usr/local/lib/ on ${CMAKE_SYSTEM_NAME}")
  link_directories(/usr/local/lib)
endif()


ADD_SUBDIRECTORY(algorithm)
ADD_SUBDIRECTORY(distributions)
ADD_SUBDIRECTORY(evolution_models)
ADD_SUBDIRECTORY(io_data)
ADD_SUBDIRECTORY(mutations)


SET(LOCAL_LIBS LibEvolutionModels LibDistributions LibIoData LibMutations)

#message("C: ${SOURCE_FILES} ")
#message(${CMAKE_CURRENT_SOURCE_DIR})

add_executable(accuMUlate main.cc ${SOURCE_FILES})
target_link_libraries(accuMUlate ${LIBS} ${LOCAL_LIBS})


add_executable(EMTest EMTest.cc ${SOURCE_FILES} )

target_link_libraries(EMTest ${LIBS} ${LOCAL_LIBS})
target_link_libraries(EMTest profiler)

add_executable(AlignmentPreprocessor main_alignment_preprocessor.cc ${SOURCE_FILES})
target_link_libraries(AlignmentPreprocessor ${LIBS} ${LOCAL_LIBS})
#target_link_libraries(AlignmentPreprocessor profiler)

add_executable(MainRefitData main_refit_data.cc ${SOURCE_FILES} )
target_link_libraries(MainRefitData ${LIBS} ${LOCAL_LIBS})



#add_executable(pp utils/post_processor.cc parsers.cc model.cc)
#target_link_libraries(pp ${Boost_LIBRARIES} ${Bamtools_LIBRARIES})
#link_directories("${Bamtools_LIBRARY_DIR}/bamtools/")
#target_link_libraries(pp ${Boost_LIBRARIES} bamtools bamtools-utils )


#add_executable(freq_seq utils/freq_seq.cc parsers.cc)
#target_link_libraries(pp bamtools bamtools-utils)
